
% (C) Copyright 2018                
%     All rights reserved           
%
% Author: Sheng Liu, May 2018

classdef PSF_interp < handle
    % PSF_interp class for generating PSFs from a pupil function
    %   create object: obj = PSF_interp(data)
    %   
    % PSF_interp Properties (Input):
    %   Boxsize - 
    %   Pixelsize - 
    %   Xpos - 
    %   Ypos - 
    %   Zpos - 
    %   
    % PSF_interp Properties (Output):
    %   ScaledPSFs - 
    %
    % PSF_interp Methods:
    %   genSamplePSF - generate sample psf from measured PSF data
    %   genPSF - generate PSFs from the given pupil function
    %   pickbead - 
    %
    properties
        PSFdata;% a 3D matrix of PSF image with fine sampling size in z or x or y, pixel value should represent photon count
        Xpos;% x positions of simulated emitters, a vector of N elements, unit is pixel
        Ypos;% y positions of simulated emitters, a vector of N elements, unit is pixel
        Zpos;% z positions of simulated emitters relative to the immersion medium, a vector of N elements, unit is micron
        PSFsize; % image size of the SamplePSF
        Boxsize; % image size of out put PSF
        Pixelsize;% pixel size at sample plane, unit is micron
        Samplepsf;% a 3D matrix of normalized PSF images
        Numzpos;% number of z positions in sample PSF
        Zrange;% the upper and lower limit of z in sample PSF, the unit is micron
    end
    

    properties (SetAccess = private, GetAccess = public)
        % PSFs - out put PSFs from Fourier transform of the pupil function,
        % it's a 3D matrix of Boxsize x Boxsize x N, N is the number of
        % elements in Xpos.
        ScaledPSFs;
    end
    
    methods
        function obj = PSF_interp(data)
            obj.PSFdata = data;
            obj.Numzpos = size(data,3);
        end
        
        function genSamplePSF(obj)
            % genSamplePSF - generate sample psf from measured PSF data
            psf0 = obj.pickbead(obj.PSFdata,obj.PSFsize);
            psf0(psf0<=0) = 1e-6;
            samplepsf = zeros(obj.PSFsize,obj.PSFsize,obj.Numzpos);
            for ii = 1:obj.Numzpos
                psfi = psf0(:,:,ii);
                normf = sum(psfi(:));
                samplepsf(:,:,ii) = psfi./normf;
            end
            
            obj.Samplepsf = samplepsf;
        end
        
        function [psfxyz] = genPSF(obj)
            % genPSF - generate PSFs from Sample PSF.
            %   The PSFs at different z positions are generated from
            %   interplation. The PSFs at different x,y positions are
            %   generated by add a shift phase in Fourier space
            % interpolate in z
            N = numel(obj.Zpos);
            dim1 = obj.PSFsize*obj.PSFsize;
            zs = linspace(obj.Zrange(1),obj.Zrange(2),obj.Numzpos);
            psf2 = reshape(obj.Samplepsf,dim1,obj.Numzpos);
            psf2i = zeros(dim1,N);
            z = obj.Zpos;
            for ii = 1:dim1
                v = interp1(zs,psf2(ii,:),z);
                psf2i(ii,:) = v;
            end
            psfz = reshape(psf2i,obj.PSFsize,obj.PSFsize,N);
            
            % shift in xy
            x = obj.Xpos;
            y = obj.Ypos;
            R = obj.PSFsize;
            pxsz = obj.Pixelsize;
            [X,Y] = meshgrid(-R/2:R/2-1,-R/2:R/2-1);
            Zo = sqrt(X.^2+Y.^2);
            scale = R*pxsz;
            k_r = Zo./scale;
            Phi = atan2(Y,X);
            psfxy = zeros(R,R,N);
            for ii = 1:N
                psf0 = psfz(:,:,ii);
                shiftphase = -k_r.*cos(Phi).*x(ii).*pxsz-k_r.*sin(Phi).*y(ii).*pxsz;
                shiftphaseE = exp(-1i.*2.*pi.*shiftphase);
                fpsf = fftshift(ifft2(psf0));
                psfxy(:,:,ii) = abs(fft2(fpsf.*shiftphaseE));
            end
            psfxyz = psfxy;
            Ri = obj.Boxsize;
            realsize0 = floor(Ri/2);
            realsize1 = ceil(Ri/2);
            startx = -realsize0+R/2+1;endx=realsize1+R/2;
            starty = -realsize0+R/2+1;endy=realsize1+R/2;
            obj.ScaledPSFs = psfxyz(startx:endx,starty:endy,:);
            
        end
        
    end

    methods(Static)
        function subroi = pickbead(ims,boxsize)
            s1 = floor(boxsize/2);
            s2 = ceil(boxsize/2);
            sz = size(ims);
%            xsz = max(sz(1),sz(2));
%            h = dipshow(ims(:,:,round(sz(3)/2)));
%            diptruesize(h,round(800/xsz*100))
%            centers = dipgetcoords(h,1);
            im0 = ims(:,:,round(sz(3)/2));
            [centers(2),centers(1)] = find(im0==max(im0(:)));
            subroi = ims(centers(1,2)-s1+1:centers(1,2)+s2,centers(1,1)-s1+1:centers(1,1)+s2,:);
%            close(h)       
        end
    end
    
end

